// I18n.js
// =======
//
// This small library provides the Rails I18n API on the Javascript.
// You don't actually have to use Rails (or even Ruby) to use I18n.js.
// Just make sure you export all translations in an object like this:
//
//     I18n.translations.en = {
//       hello: "Hello World"
//     };
//
// See tests for specific formatting like numbers and dates.
//
!function(e) {
    if ("undefined" != typeof module && module.exports) // Node/CommonJS
    module.exports = e(this); else if ("function" == typeof define && define.amd) {
        // AMD
        var t = this;
        define("i18n", function() {
            return e(t);
        });
    } else // Browser globals
    this.I18n = e(this);
}(function(e) {
    "use strict";
    // Use previously defined object if exists in current scope
    var t = e && e.I18n || {}, r = Array.prototype.slice, a = function(e) {
        return ("0" + e.toString()).substr(-2);
    }, i = function(e, t) {
        return l("round", e, -t).toFixed(t);
    }, n = function(e) {
        var t = typeof e;
        return "function" === t || "object" === t && !!e;
    }, s = function(e) {
        return Array.isArray ? Array.isArray(e) : "[object Array]" === Object.prototype.toString.call(e);
    }, l = function(e, t, r) {
        // If the exp is undefined or zero...
        // If the exp is undefined or zero...
        // If the value is not a number or the exp is not an integer...
        // Shift
        // Shift back
        return "undefined" == typeof r || 0 === +r ? Math[e](t) : (t = +t, r = +r, isNaN(t) || "number" != typeof r || r % 1 !== 0 ? NaN : (t = t.toString().split("e"), 
        t = Math[e](+(t[0] + "e" + (t[1] ? +t[1] - r : -r))), t = t.toString().split("e"), 
        +(t[0] + "e" + (t[1] ? +t[1] + r : r))));
    }, o = {
        day_names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        abbr_day_names: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
        month_names: [ null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        abbr_month_names: [ null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
        meridian: [ "AM", "PM" ]
    }, u = {
        precision: 3,
        separator: ".",
        delimiter: ",",
        strip_insignificant_zeros: !1
    }, c = {
        unit: "$",
        precision: 2,
        format: "%u%n",
        sign_first: !0,
        delimiter: ",",
        separator: "."
    }, p = {
        unit: "%",
        precision: 3,
        format: "%n%u",
        separator: ".",
        delimiter: ""
    }, h = [ null, "kb", "mb", "gb", "tb" ], f = {
        // Set default locale. This locale will be used when fallback is enabled and
        // the translation doesn't exist in a particular locale.
        defaultLocale: "en",
        locale: "en",
        defaultSeparator: ".",
        placeholder: /(?:\{\{|%\{)(.*?)(?:\}\}?)/gm,
        fallbacks: !1,
        translations: {},
        missingBehaviour: "message",
        missingTranslationPrefix: ""
    };
    // Much like `reset`, but only assign options if not already assigned
    // Return a list of all locales that must be tried before returning the
    // missing translation message. By default, this will consider the inline option,
    // current locale and fallback locale.
    //
    //     I18n.locales.get("de-DE");
    //     // ["de-DE", "de", "en"]
    //
    // You can define custom rules for any locale. Just make sure you return a array
    // containing all locales.
    //
    //     // Default the Wookie locale to English.
    //     I18n.locales["wk"] = function(locale) {
    //       return ["en"];
    //     };
    //
    // Retrieve locales based on inline locale, current locale or default to
    // I18n's detection.
    // The default locale list.
    // Hold pluralization rules.
    // Return the pluralizer for a specific locale.
    // If no specify locale is found, then I18n's default will be used.
    // The default pluralizer rule.
    // It detects the `zero`, `one`, and `other` scopes.
    // Return current locale. If no locale has been set, then
    // the current locale will be the default locale.
    // Check if value is different than undefined and null;
    // Find and process the translation using the provided scope and options.
    // This is used internally by some functions and should not be used as an
    // public API.
    // Rails changed the way the meridian is stored.
    // It started with `date.meridian` returning an array,
    // then it switched to `time.am` and `time.pm`.
    // This function abstracts this difference and returns
    // the correct meridian or the default value when none is provided.
    // Merge serveral hash options, checking if value is set before
    // overwriting any value. The precedence is from left to right.
    //
    //     I18n.prepareOptions({name: "John Doe"}, {name: "Mary Doe", role: "user"});
    //     #=> {name: "John Doe", role: "user"}
    //
    // Generate a list of translation options for default fallbacks.
    // `defaultValue` is also deleted from options as it is returned as part of
    // the translationOptions array.
    // Translate the given scope with the provided options.
    // This function interpolates the all variables in the given message.
    // Pluralize the given scope using the `count` value.
    // The pluralized translation may have other placeholders,
    // which will be retrieved from `options`.
    // Return a missing translation message for the given parameters.
    // Return a missing placeholder message for given parameters
    // Format number using localization rules.
    // The options will be retrieved from the `number.format` scope.
    // If this isn't present, then the following options will be used:
    //
    // - `precision`: `3`
    // - `separator`: `"."`
    // - `delimiter`: `","`
    // - `strip_insignificant_zeros`: `false`
    //
    // You can also override these options by providing the `options` argument.
    //
    // Format currency with localization rules.
    // The options will be retrieved from the `number.currency.format` and
    // `number.format` scopes, in that order.
    //
    // Any missing option will be retrieved from the `I18n.toNumber` defaults and
    // the following options:
    //
    // - `unit`: `"$"`
    // - `precision`: `2`
    // - `format`: `"%u%n"`
    // - `delimiter`: `","`
    // - `separator`: `"."`
    //
    // You can also override these options by providing the `options` argument.
    //
    // Localize several values.
    // You can provide the following scopes: `currency`, `number`, or `percentage`.
    // If you provide a scope that matches the `/^(date|time)/` regular expression
    // then the `value` will be converted by using the `I18n.toTime` function.
    //
    // It will default to the value's `toString` function.
    //
    // Parse a given `date` string into a JavaScript Date object.
    // This function is time zone aware.
    //
    // The following string formats are recognized:
    //
    //    yyyy-mm-dd
    //    yyyy-mm-dd[ T]hh:mm::ss
    //    yyyy-mm-dd[ T]hh:mm::ss
    //    yyyy-mm-dd[ T]hh:mm::ssZ
    //    yyyy-mm-dd[ T]hh:mm::ss+0000
    //    yyyy-mm-dd[ T]hh:mm::ss+00:00
    //    yyyy-mm-dd[ T]hh:mm::ss.123Z
    //
    // Formats time according to the directives in the given format string.
    // The directives begins with a percent (%) character. Any text not listed as a
    // directive will be passed through to the output string.
    //
    // The accepted formats are:
    //
    //     %a  - The abbreviated weekday name (Sun)
    //     %A  - The full weekday name (Sunday)
    //     %b  - The abbreviated month name (Jan)
    //     %B  - The full month name (January)
    //     %c  - The preferred local date and time representation
    //     %d  - Day of the month (01..31)
    //     %-d - Day of the month (1..31)
    //     %H  - Hour of the day, 24-hour clock (00..23)
    //     %-H - Hour of the day, 24-hour clock (0..23)
    //     %I  - Hour of the day, 12-hour clock (01..12)
    //     %-I - Hour of the day, 12-hour clock (1..12)
    //     %m  - Month of the year (01..12)
    //     %-m - Month of the year (1..12)
    //     %M  - Minute of the hour (00..59)
    //     %-M - Minute of the hour (0..59)
    //     %p  - Meridian indicator (AM  or  PM)
    //     %S  - Second of the minute (00..60)
    //     %-S - Second of the minute (0..60)
    //     %w  - Day of the week (Sunday is 0, 0..6)
    //     %y  - Year without a century (00..99)
    //     %-y - Year without a century (0..99)
    //     %Y  - Year with century
    //     %z  - Timezone offset (+0545)
    //
    // Convert the given dateString into a formatted date.
    // Convert a number into a formatted percentage value.
    // Convert a number into a readable size representation.
    /**
   * Merge obj1 with obj2 (shallow merge), without modifying inputs
   * @param {Object} obj1
   * @param {Object} obj2
   * @returns {Object} Merged values of obj1 and obj2
   *
   * In order to support ES3, `Object.prototype.hasOwnProperty.call` is used
   * Idea is from:
   * https://stackoverflow.com/questions/8157700/object-has-no-hasownproperty-method-i-e-its-undefined-ie8
   */
    // Set aliases, so we can save some typing.
    return t.reset = function() {
        // Set default locale. This locale will be used when fallback is enabled and
        // the translation doesn't exist in a particular locale.
        this.defaultLocale = f.defaultLocale, // Set the current locale to `en`.
        this.locale = f.locale, // Set the translation key separator.
        this.defaultSeparator = f.defaultSeparator, // Set the placeholder format. Accepts `{{placeholder}}` and `%{placeholder}`.
        this.placeholder = f.placeholder, // Set if engine should fallback to the default locale when a translation
        // is missing.
        this.fallbacks = f.fallbacks, // Set the default translation object.
        this.translations = f.translations, // Set the default missing behaviour
        this.missingBehaviour = f.missingBehaviour, // Set the default missing string prefix for guess behaviour
        this.missingTranslationPrefix = f.missingTranslationPrefix;
    }, t.initializeOptions = function() {
        "undefined" == typeof this.defaultLocale && null !== this.defaultLocale && (this.defaultLocale = f.defaultLocale), 
        "undefined" == typeof this.locale && null !== this.locale && (this.locale = f.locale), 
        "undefined" == typeof this.defaultSeparator && null !== this.defaultSeparator && (this.defaultSeparator = f.defaultSeparator), 
        "undefined" == typeof this.placeholder && null !== this.placeholder && (this.placeholder = f.placeholder), 
        "undefined" == typeof this.fallbacks && null !== this.fallbacks && (this.fallbacks = f.fallbacks), 
        "undefined" == typeof this.translations && null !== this.translations && (this.translations = f.translations);
    }, t.initializeOptions(), t.locales = {}, t.locales.get = function(e) {
        var r = this[e] || this[t.locale] || this.default;
        return "function" == typeof r && (r = r(e)), s(r) === !1 && (r = [ r ]), r;
    }, t.locales.default = function(e) {
        var r, a = [], i = [];
        // Handle the inline locale option that can be provided to
        // the `I18n.t` options.
        // Add the current locale to the list.
        // Add the default locale if fallback strategy is enabled.
        // Compute each locale with its country code.
        // So this will return an array containing both
        // `de-DE` and `de` locales.
        // No locales set? English it is.
        return e && a.push(e), !e && t.locale && a.push(t.locale), t.fallbacks && t.defaultLocale && a.push(t.defaultLocale), 
        a.forEach(function(e) {
            r = e.split("-")[0], ~i.indexOf(e) || i.push(e), t.fallbacks && r && r !== e && !~i.indexOf(r) && i.push(r);
        }), a.length || a.push("en"), i;
    }, t.pluralization = {}, t.pluralization.get = function(e) {
        return this[e] || this[t.locale] || this.default;
    }, t.pluralization.default = function(e) {
        switch (e) {
          case 0:
            return [ "zero", "other" ];

          case 1:
            return [ "one" ];

          default:
            return [ "other" ];
        }
    }, t.currentLocale = function() {
        return this.locale || this.defaultLocale;
    }, t.isSet = function(e) {
        return void 0 !== e && null !== e;
    }, t.lookup = function(e, t) {
        t = this.prepareOptions(t);
        var r, a, i, n = this.locales.get(t.locale).slice();
        n[0];
        for (e = this.getFullScope(e, t); n.length; ) if (r = n.shift(), a = e.split(this.defaultSeparator), 
        i = this.translations[r]) {
            for (;a.length && (i = i[a.shift()], void 0 !== i && null !== i); ) ;
            if (void 0 !== i && null !== i) return i;
        }
        if (this.isSet(t.defaultValue)) return t.defaultValue;
    }, t.meridian = function() {
        var e = this.lookup("time"), t = this.lookup("date");
        return e && e.am && e.pm ? [ e.am, e.pm ] : t && t.meridian ? t.meridian : o.meridian;
    }, t.prepareOptions = function() {
        for (var e, t = r.call(arguments), a = {}; t.length; ) if (e = t.shift(), "object" == typeof e) for (var i in e) e.hasOwnProperty(i) && (this.isSet(a[i]) || (a[i] = e[i]));
        return a;
    }, t.createTranslationOptions = function(e, t) {
        var r = [ {
            scope: e
        } ];
        // Defaults should be an array of hashes containing either
        // fallback scopes or messages
        // Maintain support for defaultValue. Since it is always a message
        // insert it in to the translation options as such.
        return this.isSet(t.defaults) && (r = r.concat(t.defaults)), this.isSet(t.defaultValue) && (r.push({
            message: t.defaultValue
        }), delete t.defaultValue), r;
    }, t.translate = function(e, t) {
        t = this.prepareOptions(t);
        var r, a = this.createTranslationOptions(e, t), i = a.some(function(e) {
            if (this.isSet(e.scope) ? r = this.lookup(e.scope, t) : this.isSet(e.message) && (r = e.message), 
            void 0 !== r && null !== r) return !0;
        }, this);
        return i ? ("string" == typeof r ? r = this.interpolate(r, t) : n(r) && this.isSet(t.count) && (r = this.pluralize(t.count, r, t)), 
        r) : this.missingTranslation(e, t);
    }, t.interpolate = function(e, t) {
        t = this.prepareOptions(t);
        var r, a, i, n, s = e.match(this.placeholder);
        if (!s) return e;
        for (var a; s.length; ) r = s.shift(), i = r.replace(this.placeholder, "$1"), a = this.isSet(t[i]) ? t[i].toString().replace(/\$/gm, "_#$#_") : i in t ? this.nullPlaceholder(r, e, t) : this.missingPlaceholder(r, e, t), 
        n = new RegExp(r.replace(/\{/gm, "\\{").replace(/\}/gm, "\\}")), e = e.replace(n, a);
        return e.replace(/_#\$#_/g, "$");
    }, t.pluralize = function(e, t, r) {
        r = this.prepareOptions(r);
        var a, i, s, l, o;
        if (a = n(t) ? t : this.lookup(t, r), !a) return this.missingTranslation(t, r);
        for (i = this.pluralization.get(r.locale), s = i(e); s.length; ) if (l = s.shift(), 
        this.isSet(a[l])) {
            o = a[l];
            break;
        }
        return r.count = String(e), this.interpolate(o, r);
    }, t.missingTranslation = function(e, t) {
        //guess intended string
        if ("guess" == this.missingBehaviour) {
            //get only the last portion of the scope
            var r = e.split(".").slice(-1)[0];
            //replace underscore with space && camelcase with space and lowercase letter
            return (this.missingTranslationPrefix.length > 0 ? this.missingTranslationPrefix : "") + r.replace("_", " ").replace(/([a-z])([A-Z])/g, function(e, t, r) {
                return t + " " + r.toLowerCase();
            });
        }
        var a = this.getFullScope(e, t), i = [ this.currentLocale(), a ].join(this.defaultSeparator);
        return '[missing "' + i + '" translation]';
    }, t.missingPlaceholder = function(e, t, r) {
        return "[missing " + e + " value]";
    }, t.nullPlaceholder = function() {
        return t.missingPlaceholder.apply(t, arguments);
    }, t.toNumber = function(e, t) {
        t = this.prepareOptions(t, this.lookup("number.format"), u);
        var r, a, n = e < 0, s = i(Math.abs(e), t.precision).toString(), l = s.split("."), o = [], c = t.format || "%n", p = n ? "-" : "";
        for (e = l[0], r = l[1]; e.length > 0; ) o.unshift(e.substr(Math.max(0, e.length - 3), 3)), 
        e = e.substr(0, e.length - 3);
        return a = o.join(t.delimiter), t.strip_insignificant_zeros && r && (r = r.replace(/0+$/, "")), 
        t.precision > 0 && r && (a += t.separator + r), c = t.sign_first ? "%s" + c : c.replace("%n", "%s%n"), 
        a = c.replace("%u", t.unit).replace("%n", a).replace("%s", p);
    }, t.toCurrency = function(e, t) {
        return t = this.prepareOptions(t, this.lookup("number.currency.format"), this.lookup("number.format"), c), 
        this.toNumber(e, t);
    }, t.localize = function(e, t, r) {
        switch (r || (r = {}), e) {
          case "currency":
            return this.toCurrency(t);

          case "number":
            return e = this.lookup("number.format"), this.toNumber(t, e);

          case "percentage":
            return this.toPercentage(t);

          default:
            var a;
            return a = e.match(/^(date|time)/) ? this.toTime(e, t) : t.toString(), this.interpolate(a, r);
        }
    }, t.parseDate = function(e) {
        var t, r, a;
        // we have a date, so just return it.
        if ("object" == typeof e) return e;
        if (t = e.toString().match(/(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2}):(\d{2})([\.,]\d{1,3})?)?(Z|\+00:?00)?/)) {
            for (var i = 1; i <= 6; i++) t[i] = parseInt(t[i], 10) || 0;
            // month starts on 0
            t[2] -= 1, a = t[7] ? 1e3 * ("0" + t[7]) : null, r = t[8] ? new Date(Date.UTC(t[1], t[2], t[3], t[4], t[5], t[6], a)) : new Date(t[1], t[2], t[3], t[4], t[5], t[6], a);
        } else "number" == typeof e ? (// UNIX timestamp
        r = new Date(), r.setTime(e)) : e.match(/([A-Z][a-z]{2}) ([A-Z][a-z]{2}) (\d+) (\d+:\d+:\d+) ([+-]\d+) (\d+)/) ? (// This format `Wed Jul 20 13:03:39 +0000 2011` is parsed by
        // webkit/firefox, but not by IE, so we must parse it manually.
        r = new Date(), r.setTime(Date.parse([ RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$6, RegExp.$4, RegExp.$5 ].join(" ")))) : e.match(/\d+ \d+:\d+:\d+ [+-]\d+ \d+/) ? (// a valid javascript format with timezone info
        r = new Date(), r.setTime(Date.parse(e))) : (// an arbitrary javascript string
        r = new Date(), r.setTime(Date.parse(e)));
        return r;
    }, t.strftime = function(e, r) {
        var i = this.lookup("date"), n = t.meridian();
        i || (i = {}), i = this.prepareOptions(i, o);
        var s = e.getDay(), l = e.getDate(), u = e.getFullYear(), c = e.getMonth() + 1, p = e.getHours(), h = p, f = p > 11 ? 1 : 0, d = e.getSeconds(), m = e.getMinutes(), g = e.getTimezoneOffset(), b = Math.floor(Math.abs(g / 60)), y = Math.abs(g) - 60 * b, S = (g > 0 ? "-" : "+") + (b.toString().length < 2 ? "0" + b : b) + (y.toString().length < 2 ? "0" + y : y);
        return h > 12 ? h -= 12 : 0 === h && (h = 12), r = r.replace("%a", i.abbr_day_names[s]), 
        r = r.replace("%A", i.day_names[s]), r = r.replace("%b", i.abbr_month_names[c]), 
        r = r.replace("%B", i.month_names[c]), r = r.replace("%d", a(l)), r = r.replace("%e", l), 
        r = r.replace("%-d", l), r = r.replace("%H", a(p)), r = r.replace("%-H", p), r = r.replace("%I", a(h)), 
        r = r.replace("%-I", h), r = r.replace("%m", a(c)), r = r.replace("%-m", c), r = r.replace("%M", a(m)), 
        r = r.replace("%-M", m), r = r.replace("%p", n[f]), r = r.replace("%S", a(d)), r = r.replace("%-S", d), 
        r = r.replace("%w", s), r = r.replace("%y", a(u)), r = r.replace("%-y", a(u).replace(/^0+/, "")), 
        r = r.replace("%Y", u), r = r.replace("%z", S);
    }, t.toTime = function(e, t) {
        var r = this.parseDate(t), a = this.lookup(e);
        return r.toString().match(/invalid/i) ? r.toString() : a ? this.strftime(r, a) : r.toString();
    }, t.toPercentage = function(e, t) {
        return t = this.prepareOptions(t, this.lookup("number.percentage.format"), this.lookup("number.format"), p), 
        this.toNumber(e, t);
    }, t.toHumanSize = function(e, t) {
        for (var r, a, i = 1024, n = e, s = 0; n >= i && s < 4; ) n /= i, s += 1;
        return 0 === s ? (r = this.t("number.human.storage_units.units.byte", {
            count: n
        }), a = 0) : (r = this.t("number.human.storage_units.units." + h[s]), a = n - Math.floor(n) === 0 ? 0 : 1), 
        t = this.prepareOptions(t, {
            unit: r,
            precision: a,
            format: "%n%u",
            delimiter: ""
        }), this.toNumber(n, t);
    }, t.getFullScope = function(e, t) {
        // Deal with the scope as an array.
        // Deal with the scope option provided through the second argument.
        //
        //    I18n.t('hello', {scope: 'greetings'});
        //
        return t = this.prepareOptions(t), e.constructor === Array && (e = e.join(this.defaultSeparator)), 
        t.scope && (e = [ t.scope, e ].join(this.defaultSeparator)), e;
    }, t.extend = function(e, t) {
        var r, a = {};
        for (r in e) Object.prototype.hasOwnProperty.call(e, r) && (a[r] = e[r]);
        for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (a[r] = t[r]);
        return a;
    }, t.t = t.translate, t.l = t.localize, t.p = t.pluralize, t;
});
